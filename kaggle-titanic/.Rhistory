demo()
help()
help.start()
demo()
a <- 10
a
install.packages("swirl")
defaults write org.R-project.R force.LANG en_US.UTF-8
echo $LANG
install.packages("swirl")
system("defaults write org.R-project.R force.LANG en_US.UTF-8")
1:20
20:1
2b <- 0:1
c1 <- c(1:20, 19:1)
c1
tmp <- c(4, 6, 3)
e1 <- rep(c(4,6,3), times=3)
e1
?rep
f1 <- rep(c(4,6,3), length.out=31)
f1
g1 <- rep(c(4,6,6,3,3,3),each=2)
g1
g1 <-rep(c(4,6,3), c(2,4,6))
g1
rep(1:4, each = 2, len = 10)
rep(1:4, each = 2, len = 12)
log(exp(3))
x <- seq(3, 6, by=.1)
x
exp(x)*cos(x)
?paste
paste("label", 1:30)
paste("fn",1:30)
paste("fn",1:30,sep="")
set.seed(50)
xVec <- sample(0:999, 250, replace=T)
yVec <- sample(0:999, 250, replace=T)
xVec
yVec
x <- array(1:20, dim=c(4,5))
x
x <- 1:20
x[-2]
x[2]
x[2:5]
x[-2:5]
x[-1 * 2:5]
getwd()
setwd("/Users/susovan/Documents/github/ML-problems/kaggle-titanic")
setwd("~/Documents/github/ML-problems/kaggle-titanic")
setwd('~/Documents/github/ML-problems/kaggle-titanic')
setwd('~/Documents')
setwd('~/Documents/github/ML-problems')
setwd('~/Documents/github/ML-problems/kaggle-titanic')
read.csv('./data/train.csv')
df.train <- read.csv('./data/train.csv')
str(df.train)
missing.types <- c("NA", "")
?read.csv()
df.train <- read.csv('./data/train.csv', na.strings=c("",NA"))
;
q()
a
getwd()
?
?str_locate()
?str_sub()
?strsplit()
strsplit("Palsson, Master. Gosta Leonard", "[.,]")
strsplit("Palsson, Master. Gosta Leonard", "[.,]")[[1]]
strsplit("Palsson, Master. Gosta Leonard", "[.,]")[[1]][2]
source('~/Documents/github/ML-problems/kaggle-titanic/Untitled.R')
strsplit(train$Name, "[.,]")[[1]][2]
str(train$Name)
train$Name
train$Name[1]
train$Name[1][1]
as.character(train$Name[1])
strsplit(as.character(train$Name), "[.,]")[[1]][2]
as.character(train$Name)
strsplit(as.character(train$Name), "[.,]")[[1]][2]
?trimws()
train$Name <- as.character(train$Name)
train$Title <- sapply(train$Name, FUN=function(x){trimws(strsplit(x, "[.,]")[[1]][2])})
View(train)
View(train)
str(train$Title)
train$Title <- factor(train$Title)
View(train)
View(train)
str(train$Title)
labels(train$Title)
levels(train$Title)
View(train)
View(train)
decision_tree_1 <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + family_size + Title,
data = train,
method = "class",
control = rpart.control(minsplit = 2, cp = 0))
train$family_size <- train$SibSp + train$Parch + 1
decision_tree_1 <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + family_size + Title,
data = train,
method = "class",
control = rpart.control(minsplit = 2, cp = 0))
fancyRpartPlot(decision_tree_1)
train$Embarked=='NA'
summary(train$Embarked)
str(train$Embarked)
train$Embarked[train$Embarked == ""]
train$Embarked[train$Embarked == ""] <- "S"
str(train$Embarked)
str(train$Embarked[train$Embarked == ""])
surramy(train$Embarked[train$Embarked == ""])
summary(train$Embarked[train$Embarked == ""])
summary(train$Embarked[train$Embarked == "S"])
summary(train$Embarked[train$Embarked == "C"])
summary(train$Embarked[train$Embarked == ""])
summary(train$Embarked[train$Embarked == ""])
summary(train$Embarked)
str(train$Embarked)
train$Embarked <- factor(train$Embarked)
str(train$Embarked)
str(train$Fare)
summary(train$Fare)
median(train$Fare, na.rm = TRUE)
median(train$Fare)
median(train$Fare[train$Fare!=0])
median(train$Fare[train$Fare==0])
train$Fare[train$Fare==0] <- median(train$Fare[train$Fare!=0])
median(train$Fare)
library(rpart)
predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + family_size,
data = train[!is.na(train$Age),], method = "anova")
train$Age[is.na(train$Age)] <- predict(predicted_age, train[is.na(train$Age),])
nrow(train)
##### split training data into train batch and test batch #####
library("caret")
set.seed(123)
training_rows <- createDataPartition(train$Survived, p = 0.8, list = FALSE)
train_batch <- train[training_rows, ]
test_batch <- train[-training_rows, ]
##### Build the decision tree #####
decision_tree_1 <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + family_size + Title,
data = train_batch,
method = "class",
control = rpart.control(minsplit = 2, cp = 0))
test_batch$prediction1 <- predict(decision_tree_1, test_batch, type = "class")
accuracy <- sum(test_batch$Survived == test_batch$prediction1, na.rm=TRUE)/nrow(train)
accuracy
View(test_batch)
summary(test_batch$Survived == test_batch$prediction1)
sum(test_batch$Survived == test_batch$prediction1)
sum(test_batch$Survived == test_batch$prediction1, na.rm=TRUE)
nrow(test_batch)
accuracy <- sum(test_batch$Survived == test_batch$prediction1, na.rm=TRUE)/nrow(test_batch)
accuracy
str(train$Survived)
##### Using Random Forest Analysis #####
library(randomForest)
my_forest <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title,
test_batch,
importance=TRUE,
ntree=1000)
# Make your prediction using the test set
test_batch$prediction2 <- predict(my_forest, test_batch)
accuracy2 <- sum(test_batch$Survived == test_batch$prediction2, na.rm=TRUE)/nrow(test_batch)
install.packages(randomForest)
install.packages("randomForest")
##### Using Random Forest Analysis #####
library(randomForest)
my_forest <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title,
test_batch,
importance=TRUE,
ntree=1000)
# Make your prediction using the test set
test_batch$prediction2 <- predict(my_forest, test_batch)
accuracy2 <- sum(test_batch$Survived == test_batch$prediction2, na.rm=TRUE)/nrow(test_batch)
accuracy2
##### Using Random Forest Analysis #####
library(randomForest)
my_forest <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title,
train_batch,
importance=TRUE,
ntree=1000)
# Make your prediction using the test set
test_batch$prediction2 <- predict(my_forest, test_batch)
accuracy2 <- sum(test_batch$Survived == test_batch$prediction2, na.rm=TRUE)/nrow(test_batch)
accuracy2
varImpPlot(my_forest)
##### Final solution #####
test_prediction <- predict(my_forest, test)
generateSolution(test$PassengerId, test_prediction)
generateSolution <- function(passengerIds, prediction){
# Finish the data.frame() call
solution <- data.frame(PassengerId = passengerIds, Survived = prediction)
# Use nrow() on solution
nrow(solution)
# Finish the write.csv() call
write.csv(solution, file = "solution.csv", row.names = FALSE)
}
##### Final solution #####
test_prediction <- predict(my_forest, test)
generateSolution(test$PassengerId, test_prediction)
fillMissingData <- function(dataSet){
dataSet$Embarked[dataSet$Embarked == ""] <- "S"
dataSet$Embarked <- factor(dataSet$Embarked)
dataSet$Fare[dataSet$Fare==0] <- median(dataSet$Fare[dataSet$Fare!=0])
# Prediction of a passengers Age using the other variables and a decision tree model.
predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + family_size,
data = dataSet[!is.na(dataSet$Age),], method = "anova")
dataSet$Age[is.na(dataSet$Age)] <- predict(predicted_age, dataSet[is.na(dataSet$Age),])
}
##### Final solution #####
reEngineeringDS(test)
fillMissingData(test)
test_prediction <- predict(my_forest, test)
generateSolution(test$PassengerId, test_prediction)
##### Re-engineering dataset #####
reEngineeringDS <- function(dataSet){
dataSet$family_size <- dataSet$SibSp + dataSet$Parch + 1
dataSet$Name <- as.character(dataSet$Name)
dataSet$Title <- sapply(dataSet$Name, FUN=function(x){trimws(strsplit(x, "[.,]")[[1]][2])})
dataSet$Title <- factor(dataSet$Title)
}
##### Final solution #####
reEngineeringDS(test)
fillMissingData(test)
test_prediction <- predict(my_forest, test)
generateSolution(test$PassengerId, test_prediction)
View(test)
View(test)
##### Re-engineering dataset #####
reEngineeringDS <- function(dataSet){
dataSet$family_size <- dataSet$SibSp + dataSet$Parch + 1
dataSet$Name <- as.character(dataSet$Name)
dataSet$Title <- sapply(dataSet$Name, FUN=function(x){trimws(strsplit(x, "[.,]")[[1]][2])})
dataSet$Title <- factor(dataSet$Title)
return(dataSet)
}
##### Fill missing data #####
library(rpart)
fillMissingData <- function(dataSet){
dataSet$Embarked[dataSet$Embarked == ""] <- "S"
dataSet$Embarked <- factor(dataSet$Embarked)
dataSet$Fare[dataSet$Fare==0] <- median(dataSet$Fare[dataSet$Fare!=0])
# Prediction of a passengers Age using the other variables and a decision tree model.
predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + family_size,
data = dataSet[!is.na(dataSet$Age),], method = "anova")
dataSet$Age[is.na(dataSet$Age)] <- predict(predicted_age, dataSet[is.na(dataSet$Age),])
return(dataSet)
}
##### Final solution #####
test <- reEngineeringDS(test)
test <- fillMissingData(test)
test_prediction <- predict(my_forest, test)
generateSolution(test$PassengerId, test_prediction)
View(test)
View(test)
str(test_batch)
test_prediction <- predict(my_forest, test)
str(test)
str(train_batch)
levels(train)
levels(train_batch$Title)
levels(test_batch$Title)
levels(test$Title)
getwd()
setwd("~")
source("Unti")
dirname(parent.frame(2)$ofile)
swtwd('/Users/susovan/Documents/github/ML-problems/kaggle-titanic')
setwd('/Users/susovan/Documents/github/ML-problems/kaggle-titanic')
ls()
test.data.file <- "../data/test.csv"
test.data.file <- "../data/test.csv"
base.test <- read.csv(test.data.file)
